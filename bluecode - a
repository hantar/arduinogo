/*
Blue Game Code for Arduinog
12/1/16
00:20am
*/
#include <Adafruit_NeoPixel.h>
#define PIN 6 //marked D1 on GEMMA
#include <Wire.h>
#include "Adafruit_GFX.h"
#include <Adafruit_LEDBackpack.h>

const int buttonPin = 3;     // the number of the pushbutton pin
const int GrnLed =  12;      // the number of the green LED pin

int buttonState = 0;         // variable for reading the pushbutton status
int buzzer = 13;             //buzzer pin is 13
int Time = 2400;

//sound melody
int melody[] = {262, 196,196, 220, 196,0, 247, 262};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {4, 8, 8, 4,4,4,4,4 };


Adafruit_NeoPixel strip = Adafruit_NeoPixel(16, PIN, NEO_GRB + NEO_KHZ800);
Adafruit_8x8matrix matrix = Adafruit_8x8matrix();

const byte go[] PROGMEM = {
  B00000000,
  B00000000,
  B01100110,
  B10011001,
  B10001001,
  B10111001,
  B10011001,
  B01100110}; 

int sine[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}; //these are the pixels in order of animation-- 36 pixels in total
int button = 9;
int lightButton = 0;
int lightot = 0;
int test = 0;
int cat = 12;
int redTotal = 0;
int blueTotal = 0;
int blueScore[16];
int redScore[16];

bool startButton = false;
bool game = false;

int numComparison = 0;

void setup() { 
  
  pinMode(10, OUTPUT);
  Serial.begin(9600);
  strip.begin();
  strip.setBrightness(25); //adjust brightness here
  strip.show(); // Initialize all pixels to 'off'
  pinMode(9, INPUT);
  Serial.println("8x8 LED Matrix Test");
  matrix.begin(0x70);  // pass in the address
 
  // initialize the LED pin as an output:
  pinMode(GrnLed, OUTPUT);

}

void loop() {
  if (digitalRead(3) == LOW) {
  }
  else if (digitalRead(3) == HIGH) {
    startButton = true;
    Serial.println('D');
    
    CountDown();
    
    while (startButton == true) {    
     // blueRun();
      Time -= 10;
      if (Time == 0) {
        startButton = false;
        Serial.println('L');
      //BlueWin();
        endGame();
      }
    }
  }
}

void CountDown(){
  matrix.setBrightness(0);
  for(int8_t x = 3; x != 0; x--){
  matrix.setRotation(0);
  matrix.clear();
  matrix.setCursor(1,1);
  matrix.print(x);
  matrix.writeDisplay();
  tone(buzzer,329,1000);
  delay(1000);
  
  for (int8_t y=0; y>=-10; y--) {
    matrix.clear();
    matrix.setCursor(1,y);
    matrix.print(x);
    matrix.writeDisplay();
    delay(45);
  }
  }
  
  matrix.clear();
  matrix.drawBitmap(0, 0, go, 8, 8, LED_ON);
  matrix.writeDisplay();
  tone(buzzer,987,1100);
  delay(1000);

  // turn LED on:
    digitalWrite(GrnLed, HIGH);
}

void blueRun() {

  for (int i = lightot; i <= lightot + 2; ++i) {
    strip.setPixelColor(sine[i], strip.Color(0, 0, 250));
    noColor(i);
    arraycomp(i);
    redArrayComp(i);
    lightot += 1;


    if (digitalRead(9) == HIGH) {
      strip.setPixelColor(sine[i], strip.Color(100, 100, 250));
      Serial.println('B');
      blueScore[i] = 1;
      redScore[i] = 0;
      delay(20);
      while (digitalRead(9) == HIGH) {}
    }// end if for button push

    if (Serial.read() == 'R') {
      strip.setPixelColor(sine[i], strip.Color(250, 0, 0));

      Serial.println(i);
      redScore[i] = 1;
      blueScore[i] = 0;
      delay(10);
    }

    if (lightot == 16) {
      lightot = 0;
    } // end lightot if
  } // end main for loop
}// end for Blue Void

void arraycomp(int i) {
  for (int i = 0; i <= 16; ++i) {
    if (blueScore[i] == 1) {
      strip.setPixelColor(sine[i], strip.Color(100, 100, 250));
    } // end for if statement
  } // end for for loop
} // end for void arraycomp

void redArrayComp(int i) {

  for (int i = 0; i <= 16; ++i) {
    if (redScore[i] == 1) {
      strip.setPixelColor(sine[i], strip.Color(250, 0, 0));
    } // end for if statement
  } // end for for loop

}

void noColor(int i) {

  strip.setPixelColor(sine[i - 1], strip.Color(0, 0, 0));
  delay(15); // controls how slow the light moves in a circle
  strip.show();

}


void endGame() {

  for (int e = 0; e <= 16; ++e) {
    redTotal += redScore[e];
    blueTotal += blueScore[e];

  }

  if (redTotal > blueTotal) {
    RedWin();
  }
  else if (redTotal < blueTotal) {
    BlueWin();
  }
/***************************************************************************
  //display "Game over"
  matrix.setBrightness(0); //set brightness back to darkest
  matrix.setTextSize(1);
  matrix.setTextWrap(false);  // we dont want text to wrap so it scrolls nicely
  matrix.setTextColor(LED_ON);
  sound();
  for (int8_t x=0; x>=-54; x--) {
    matrix.clear();
    matrix.setCursor(x,0);
    matrix.print("Game Over");
    matrix.writeDisplay();
    delay(100);
    matrix.clear();
  }
}
********************************************************************************/
void BlueWin() {

  for (int x = 0; x <= 1; ++x) {
    for (int e = 0; e <= 16; ++e) {
      strip.setPixelColor(sine[e], strip.Color(0, 0, 250));
      strip.show();
      delay(50);
    }

    for (int e = 15; e >= 0 ; --e) {
      strip.setPixelColor(sine[e], strip.Color(0, 0, 250));
      strip.show();
      delay(50);
    }
  }
  for (int x = 0; x <= 2; ++ x) {
    strip.setPixelColor(sine[0], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[1], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[2], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[3], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[4], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[5], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[6], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[7], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[8], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[9], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[10], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[11], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[12], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[13], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[14], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[15], strip.Color(0, 0, 0));
    strip.show();
    delay(170);
    strip.setPixelColor(sine[0], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[1], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[2], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[3], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[4], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[5], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[6], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[7], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[8], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[9], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[10], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[11], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[12], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[13], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[14], strip.Color(0, 0, 250));
    strip.setPixelColor(sine[15], strip.Color(0, 0, 250));
    strip.show();
    delay(170);
  }

}

void RedWin() {

  for (int x = 0; x <= 1; ++x) {
    for (int e = 0; e <= 16; ++e) {
      strip.setPixelColor(sine[e], strip.Color(0, 0, 250));
      strip.show();
      delay(50);
    }

    for (int e = 15; e >= 0 ; --e) {
      strip.setPixelColor(sine[e], strip.Color(0, 0, 0));
      strip.show();
      delay(50);
    }
  }
  
  for (int x = 0; x <= 2; ++ x) {
    strip.setPixelColor(sine[0], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[1], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[2], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[3], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[4], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[5], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[6], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[7], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[8], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[9], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[10], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[11], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[12], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[13], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[14], strip.Color(0, 0, 0));
    strip.setPixelColor(sine[15], strip.Color(0, 0, 0));
    strip.show();
    delay(170);
    strip.setPixelColor(sine[0], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[1], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[2], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[3], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[4], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[5], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[6], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[7], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[8], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[9], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[10], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[11], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[12], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[13], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[14], strip.Color(250, 0, 0));
    strip.setPixelColor(sine[15], strip.Color(250, 0, 0));
    strip.show();
    delay(170);
  }
  
}
/******************************************************************
void sound() {

  for (int thisNote = 0; thisNote < 8; thisNote++) {
    int noteDuration = 1000/noteDurations[thisNote];
    tone(buzzer, melody[thisNote],noteDuration);
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    noTone(buzzer);
    }
    
}
*******************************************************************/
